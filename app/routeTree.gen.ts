/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ChatIndexImport } from './routes/chat/index'
import { Route as landingIndexImport } from './routes/(landing)/index'
import { Route as ChatIdImport } from './routes/chat/$id'
import { Route as AuthPathnameImport } from './routes/auth/$pathname'
import { Route as landingContactImport } from './routes/(landing)/contact'
import { Route as landingAboutImport } from './routes/(landing)/about'

// Create/Update Routes

const ChatIndexRoute = ChatIndexImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => rootRoute,
} as any)

const landingIndexRoute = landingIndexImport.update({
  id: '/(landing)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ChatIdRoute = ChatIdImport.update({
  id: '/chat/$id',
  path: '/chat/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthPathnameRoute = AuthPathnameImport.update({
  id: '/auth/$pathname',
  path: '/auth/$pathname',
  getParentRoute: () => rootRoute,
} as any)

const landingContactRoute = landingContactImport.update({
  id: '/(landing)/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const landingAboutRoute = landingAboutImport.update({
  id: '/(landing)/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(landing)/about': {
      id: '/(landing)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof landingAboutImport
      parentRoute: typeof rootRoute
    }
    '/(landing)/contact': {
      id: '/(landing)/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof landingContactImport
      parentRoute: typeof rootRoute
    }
    '/auth/$pathname': {
      id: '/auth/$pathname'
      path: '/auth/$pathname'
      fullPath: '/auth/$pathname'
      preLoaderRoute: typeof AuthPathnameImport
      parentRoute: typeof rootRoute
    }
    '/chat/$id': {
      id: '/chat/$id'
      path: '/chat/$id'
      fullPath: '/chat/$id'
      preLoaderRoute: typeof ChatIdImport
      parentRoute: typeof rootRoute
    }
    '/(landing)/': {
      id: '/(landing)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof landingIndexImport
      parentRoute: typeof rootRoute
    }
    '/chat/': {
      id: '/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/about': typeof landingAboutRoute
  '/contact': typeof landingContactRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/chat/$id': typeof ChatIdRoute
  '/': typeof landingIndexRoute
  '/chat': typeof ChatIndexRoute
}

export interface FileRoutesByTo {
  '/about': typeof landingAboutRoute
  '/contact': typeof landingContactRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/chat/$id': typeof ChatIdRoute
  '/': typeof landingIndexRoute
  '/chat': typeof ChatIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(landing)/about': typeof landingAboutRoute
  '/(landing)/contact': typeof landingContactRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/chat/$id': typeof ChatIdRoute
  '/(landing)/': typeof landingIndexRoute
  '/chat/': typeof ChatIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/about'
    | '/contact'
    | '/auth/$pathname'
    | '/chat/$id'
    | '/'
    | '/chat'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/contact' | '/auth/$pathname' | '/chat/$id' | '/' | '/chat'
  id:
    | '__root__'
    | '/(landing)/about'
    | '/(landing)/contact'
    | '/auth/$pathname'
    | '/chat/$id'
    | '/(landing)/'
    | '/chat/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  landingAboutRoute: typeof landingAboutRoute
  landingContactRoute: typeof landingContactRoute
  AuthPathnameRoute: typeof AuthPathnameRoute
  ChatIdRoute: typeof ChatIdRoute
  landingIndexRoute: typeof landingIndexRoute
  ChatIndexRoute: typeof ChatIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  landingAboutRoute: landingAboutRoute,
  landingContactRoute: landingContactRoute,
  AuthPathnameRoute: AuthPathnameRoute,
  ChatIdRoute: ChatIdRoute,
  landingIndexRoute: landingIndexRoute,
  ChatIndexRoute: ChatIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(landing)/about",
        "/(landing)/contact",
        "/auth/$pathname",
        "/chat/$id",
        "/(landing)/",
        "/chat/"
      ]
    },
    "/(landing)/about": {
      "filePath": "(landing)/about.tsx"
    },
    "/(landing)/contact": {
      "filePath": "(landing)/contact.tsx"
    },
    "/auth/$pathname": {
      "filePath": "auth/$pathname.tsx"
    },
    "/chat/$id": {
      "filePath": "chat/$id.tsx"
    },
    "/(landing)/": {
      "filePath": "(landing)/index.tsx"
    },
    "/chat/": {
      "filePath": "chat/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

import{eventHandler as h,toWebRequest as f}from"@tanstack/start-server-core";const P=[{path:"/__root",filePath:"/Users/jared/code-new/bendapp.dev/apps/web/app/routes/__root.tsx"},{path:"/about",filePath:"/Users/jared/code-new/bendapp.dev/apps/web/app/routes/about.tsx"},{path:"/contact",filePath:"/Users/jared/code-new/bendapp.dev/apps/web/app/routes/contact.tsx"},{path:"/",filePath:"/Users/jared/code-new/bendapp.dev/apps/web/app/routes/index.tsx"},{path:"/api/hello",filePath:"/Users/jared/code-new/bendapp.dev/apps/web/app/routes/api/hello.ts",$APIRoute:{src:"app/routes/api/hello.ts?pick=APIRoute",build:()=>import("../hello.js"),import:()=>import("../hello.js")}}],m=["GET","POST","PUT","PATCH","DELETE","OPTIONS","HEAD"];function g(e){return h(async s=>{const r=f(s);return await e({request:r})})}const v=e=>s=>({path:e,methods:s});function w(e,s){const r=e.pathname.split("/").filter(Boolean),l=s.sort((o,t)=>{const a=o.routePath.split("/").filter(Boolean);return t.routePath.split("/").filter(Boolean).length-a.length}).filter(o=>{const t=o.routePath.split("/").filter(Boolean);return r.length>=t.length});for(const o of l){const t=o.routePath.split("/").filter(Boolean),a={};let n=!0;for(let p=0;p<t.length;p++){const u=t[p],c=r[p];if(u.startsWith("$"))if(u==="$"){const i=r.slice(p).join("/");if(i!=="")a["*"]=i,a._splat=i;else{n=!1;break}}else{const i=u.slice(1);a[i]=c}else if(u!==c){n=!1;break}}if(n)return{routePath:o.routePath,params:a,payload:o.payload}}}const d=P.filter(e=>e.$APIRoute);function R(e){const s=[];return e.forEach(r=>{const o=r.path.split("/").filter(Boolean).map(t=>t==="*splat"?"$":t.startsWith(":$")&&t.endsWith("?")?t.slice(1,-1):t).join("/");s.push({routePath:`/${o}`,payload:r})}),s}const I=async({request:e})=>{if(!d.length)return new Response("No routes found",{status:404});if(!m.includes(e.method))return new Response("Method not allowed",{status:405});const s=R(d),r=new URL(e.url,"http://localhost:3000"),l=w(r,s);if(!l)return new Response("Not found",{status:404});let o;try{o=await l.payload.$APIRoute.import().then(n=>n.APIRoute)}catch(n){return console.error("Error importing route file:",n),new Response("Internal server error",{status:500})}if(!o)return new Response("Internal server error",{status:500});const t=e.method,a=o.methods[t];return a?await a({request:e,params:l.params}):new Response("Method not allowed",{status:405})};export{v as a,g as c,I as d};
